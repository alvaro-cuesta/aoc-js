const { describeDay } = require('../test-utils')

const EXAMPLE_INPUT = `....#
#..#.
#..##
..#..
#....
`

describeDay(
  2019,
  24,

  27777901,
  2047,

  ({
    parseInput,
    step,
    getBiodiversity,
    stepRecursive,
    countGridBugsRecursive,
  }) => {
    describe('step', () => {
      test('Example input - 1 step', () => {
        expect.assertions(1)
        expect(step(parseInput(EXAMPLE_INPUT))).toEqual([
          ['#', '.', '.', '#', '.'],
          ['#', '#', '#', '#', '.'],
          ['#', '#', '#', '.', '#'],
          ['#', '#', '.', '#', '#'],
          ['.', '#', '#', '.', '.'],
        ])
      })

      test('Example input - 2 steps', () => {
        expect.assertions(1)
        expect(step(step(parseInput(EXAMPLE_INPUT)))).toEqual([
          ['#', '#', '#', '#', '#'],
          ['.', '.', '.', '.', '#'],
          ['.', '.', '.', '.', '#'],
          ['.', '.', '.', '#', '.'],
          ['#', '.', '#', '#', '#'],
        ])
      })

      test('Example input - 3 steps', () => {
        expect.assertions(1)
        expect(step(step(step(parseInput(EXAMPLE_INPUT))))).toEqual([
          ['#', '.', '.', '.', '.'],
          ['#', '#', '#', '#', '.'],
          ['.', '.', '.', '#', '#'],
          ['#', '.', '#', '#', '.'],
          ['.', '#', '#', '.', '#'],
        ])
      })

      test('Example input - 4 steps', () => {
        expect.assertions(1)
        expect(step(step(step(step(parseInput(EXAMPLE_INPUT)))))).toEqual([
          ['#', '#', '#', '#', '.'],
          ['.', '.', '.', '.', '#'],
          ['#', '#', '.', '.', '#'],
          ['.', '.', '.', '.', '.'],
          ['#', '#', '.', '.', '.'],
        ])
      })
    })

    test('getBiodiversity', () => {
      expect.assertions(1)
      expect(
        getBiodiversity([
          ['.', '.', '.', '.', '.'],
          ['.', '.', '.', '.', '.'],
          ['.', '.', '.', '.', '.'],
          ['#', '.', '.', '.', '.'],
          ['.', '#', '.', '.', '.'],
        ]),
      ).toEqual(2129920)
    })

    test('stepRecursive', () => {
      expect.assertions(1)

      let grid = [parseInput(EXAMPLE_INPUT)]

      for (let i = 0; i < 10; i++) {
        grid = stepRecursive(grid)
      }

      expect(grid).toEqual([
        [
          ['.', '.', '.', '.', '.'],
          ['.', '.', '.', '.', '.'],
          ['.', '.', '.', '.', '.'],
          ['.', '.', '.', '.', '.'],
          ['.', '.', '.', '.', '.'],
        ],
        [
          ['.', '.', '#', '.', '.'],
          ['.', '#', '.', '#', '.'],
          ['.', '.', '.', '.', '#'],
          ['.', '#', '.', '#', '.'],
          ['.', '.', '#', '.', '.'],
        ],
        [
          ['.', '.', '.', '#', '.'],
          ['.', '.', '.', '#', '#'],
          ['.', '.', '.', '.', '.'],
          ['.', '.', '.', '#', '#'],
          ['.', '.', '.', '#', '.'],
        ],
        [
          ['#', '.', '#', '.', '.'],
          ['.', '#', '.', '.', '.'],
          ['.', '.', '.', '.', '.'],
          ['.', '#', '.', '.', '.'],
          ['#', '.', '#', '.', '.'],
        ],
        [
          ['.', '#', '.', '#', '#'],
          ['.', '.', '.', '.', '#'],
          ['.', '.', '.', '.', '#'],
          ['.', '.', '.', '#', '#'],
          ['.', '#', '#', '#', '.'],
        ],
        [
          ['#', '.', '.', '#', '#'],
          ['.', '.', '.', '#', '#'],
          ['.', '.', '.', '.', '.'],
          ['.', '.', '.', '#', '.'],
          ['.', '#', '#', '#', '#'],
        ],
        [
          ['.', '#', '.', '.', '.'],
          ['.', '#', '.', '#', '#'],
          ['.', '#', '.', '.', '.'],
          ['.', '.', '.', '.', '.'],
          ['.', '.', '.', '.', '.'],
        ],
        [
          ['.', '#', '#', '.', '.'],
          ['#', '.', '.', '#', '#'],
          ['.', '.', '.', '.', '#'],
          ['#', '#', '.', '#', '#'],
          ['#', '#', '#', '#', '#'],
        ],
        [
          ['#', '#', '#', '.', '.'],
          ['#', '#', '.', '#', '.'],
          ['#', '.', '.', '.', '.'],
          ['.', '#', '.', '#', '#'],
          ['#', '.', '#', '.', '.'],
        ],
        [
          ['.', '.', '#', '#', '#'],
          ['.', '.', '.', '.', '.'],
          ['#', '.', '.', '.', '.'],
          ['#', '.', '.', '.', '.'],
          ['#', '.', '.', '.', '#'],
        ],
        [
          ['.', '#', '#', '#', '.'],
          ['#', '.', '.', '#', '.'],
          ['#', '.', '.', '.', '.'],
          ['#', '#', '.', '#', '.'],
          ['.', '.', '.', '.', '.'],
        ],
        [
          ['#', '#', '#', '#', '.'],
          ['#', '.', '.', '#', '.'],
          ['#', '.', '.', '#', '.'],
          ['#', '#', '#', '#', '.'],
          ['.', '.', '.', '.', '.'],
        ],
        [
          ['.', '.', '.', '.', '.'],
          ['.', '.', '.', '.', '.'],
          ['.', '.', '.', '.', '.'],
          ['.', '.', '.', '.', '.'],
          ['.', '.', '.', '.', '.'],
        ],
      ])
    })

    test('countGridBugsRecursive', () => {
      expect.assertions(1)

      let grid = [parseInput(EXAMPLE_INPUT)]

      for (let i = 0; i < 10; i++) {
        grid = stepRecursive(grid)
      }

      expect(countGridBugsRecursive(grid)).toEqual(99)
    })
  },

  (part1) => {
    test('Example input', () => {
      expect.assertions(1)
      expect(part1(EXAMPLE_INPUT)).toEqual(2129920)
    })
  },
)
